## Matrix inversion is usually a costly operation and there are advantages 
## in caching the inverse of the matrix rather than computing it every time

## The first function, makeCacheMatrix creates a list containing a function to
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. set the inverse of the matrix
## 4. get the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
   	i <- NULL
	set <- function(y) {
		x <<- y
		i <<- NULL
	}
	get <- function() x
	setinverse <- function(inv) i <<- inv
	getinverse <- function i
	list(set = set, get = get, 
	     setinverse = setinverse, 
	     getinverse = getinverse)	
}


## Calculates inverse of the matrix created with makeCacheMatrix function. 
## However, it first checks if inverse has already been computed. If so, it 
## gets the inverse from the cache and skips the computation. Otherwise, it 
## calculates the inverse and stores it in cache via setinverse function.
cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
	i <- x$getinverse()
	if(!is
}
